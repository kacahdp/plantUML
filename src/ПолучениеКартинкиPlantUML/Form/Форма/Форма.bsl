&НаКлиенте
Перем ИдентификаторКомпоненты, ВнешняяКомпонента, ДанныеГрафа;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресКомпоненты = "ОбщийМакет._dl_GraphViz1C";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ВыполнитьПодключениеВнешнейКомпоненты(Истина);
	
	ДанныеГрафа = "";
	Зум = 80;    
	
	Элементы.КартинкаОнлайн.Масштаб = Зум;
	Элементы.КартинкаОффлайн.Масштаб = Зум;
	
КонецПроцедуры

&НаСервере
Функция BFS(КонфигурационнаяЕдиница) Экспорт
	
	СписокСмежности = Новый Соответствие;
	СписокСмежности.Вставить(КонфигурационнаяЕдиница, Новый Соответствие);
	
	ВершиныПосещенные = Новый Соответствие;
	ВершиныПосещенные.Вставить(КонфигурационнаяЕдиница, Истина);
	
	ВершиныКПосещению = Новый Массив;
	ВершиныКПосещению.Добавить(КонфигурационнаяЕдиница);
	
	Пока Истина Цикл 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	_dl_СвязиОбъектовСрезПоследних.ОбъектИз КАК ОбъектИз,
		               |	_dl_СвязиОбъектовСрезПоследних.ОбъектВ КАК ОбъектВ,
		               |	_dl_СвязиОбъектовСрезПоследних.ТипСвязи КАК ТипСвязи,
		               |	_dl_СвязиОбъектовСрезПоследних.Актуальна КАК Актуальна
		               |ИЗ
		               |	РегистрСведений._dl_СвязиОбъектов.СрезПоследних(&Дата, ОбъектИз В (&СписокОбъектов)) КАК _dl_СвязиОбъектовСрезПоследних
		               |ГДЕ
		               |	_dl_СвязиОбъектовСрезПоследних.Актуальна";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("СписокОбъектов", ВершиныКПосещению);
		
		Результат = Запрос.Выполнить();
		ВершиныКПосещению.Очистить();
		Если Результат.Пустой() Тогда 
			Прервать;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ВершиныПосещенные.Получить(Выборка.ОбъектВ) = Неопределено Тогда 
				
				Если СписокСмежности.Получить(Выборка.ОбъектИз) = Неопределено Тогда 
					СписокСмежности.Вставить(Выборка.ОбъектИз, Новый Соответствие);
				КонецЕсли;			
				СписокСмежности[Выборка.ОбъектИз].Вставить(Выборка.ОбъектВ, Истина);
				
				ВершиныПосещенные.Вставить(Выборка.ОбъектВ, Истина);
				ВершиныКПосещению.Добавить(Выборка.ОбъектВ);  
						
			ИначеЕсли СписокСмежности.Получить(Выборка.ОбъектВ) = Неопределено 
				ИЛИ СписокСмежности[Выборка.ОбъектВ].Получить(Выборка.ОбъектИз) = Неопределено Тогда 

				Если СписокСмежности.Получить(Выборка.ОбъектИз) = Неопределено Тогда 
					СписокСмежности.Вставить(Выборка.ОбъектИз, Новый Соответствие);
				КонецЕсли;			
				СписокСмежности[Выборка.ОбъектИз].Вставить(Выборка.ОбъектВ, Истина);				
			КонецЕсли;
			
		КонецЦикла;
		
		СборВОбратнуюСторону(ВершиныКПосещению, ВершиныПосещенные, СписокСмежности);
		
		Если ВершиныКПосещению.Количество() = 0 Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокСмежности;
	
КонецФункции  

&НаСервере
Процедура СборВОбратнуюСторону(Знач ВершиныКП, Знач ВершиныП, СписокСмежности)
	
	ВершиныПосещенные = Новый Массив;
	Для каждого Стр Из ВершиныП Цикл
		ВершиныПосещенные.Добавить(Стр.Ключ);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_dl_СвязиОбъектовСрезПоследних.ОбъектИз КАК ОбъектИз,
	               |	_dl_СвязиОбъектовСрезПоследних.ОбъектВ КАК ОбъектВ,
	               |	_dl_СвязиОбъектовСрезПоследних.ТипСвязи КАК ТипСвязи,
	               |	_dl_СвязиОбъектовСрезПоследних.Актуальна КАК Актуальна
	               |ИЗ
	               |	РегистрСведений._dl_СвязиОбъектов.СрезПоследних(
	               |			&Дата,
	               |			ОбъектИз В (&СписокОбъектов)
	               |				И ОбъектВ В (&ВершиныПосещенные)) КАК _dl_СвязиОбъектовСрезПоследних
	               |ГДЕ
	               |	_dl_СвязиОбъектовСрезПоследних.Актуальна";
	
	Запрос.УстановитьПараметр("Дата", 				ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СписокОбъектов", 	ВершиныКП);
	Запрос.УстановитьПараметр("ВершиныПосещенные", 	ВершиныПосещенные);
	
	Результат = Запрос.Выполнить();
	//ВершиныКП.Очистить();
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл   
		
		Если СписокСмежности.Получить(Выборка.ОбъектИз) = Неопределено Тогда 
			СписокСмежности.Вставить(Выборка.ОбъектИз, Новый Соответствие);
		КонецЕсли;			
		СписокСмежности[Выборка.ОбъектИз].Вставить(Выборка.ОбъектВ, Истина);
		//Если ВершиныП.Получить(Выборка.ОбъектВ) = Неопределено Тогда 
		//	
		//	Если СписокСмежности.Получить(Выборка.ОбъектИз) = Неопределено Тогда 
		//		СписокСмежности.Вставить(Выборка.ОбъектИз, Новый Соответствие);
		//	КонецЕсли;			
		//	СписокСмежности[Выборка.ОбъектИз].Вставить(Выборка.ОбъектВ, Истина);
		//	
		//	ВершиныП.Вставить(Выборка.ОбъектВ, Истина);
		//	ВершиныКП.Добавить(Выборка.ОбъектВ);  
		//	
		//ИначеЕсли СписокСмежности.Получить(Выборка.ОбъектВ) = Неопределено 
		//	ИЛИ СписокСмежности[Выборка.ОбъектВ].Получить(Выборка.ОбъектИз) = Неопределено Тогда 
		//	
		//	Если СписокСмежности.Получить(Выборка.ОбъектИз) = Неопределено Тогда 
		//		СписокСмежности.Вставить(Выборка.ОбъектИз, Новый Соответствие);
		//	КонецЕсли;			
		//	СписокСмежности[Выборка.ОбъектИз].Вставить(Выборка.ОбъектВ, Истина);				
		//КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция СформироватьUMLДиаграммуКомпонентовПоСпискуСмежности(СписокСмежности, ИмяГрафа="") Экспорт
	
	//Граф = "digraph " + ?(ИмяГрафа="", "Граф",ИмяГрафа) + " {
	//|	node [shape=box];
	//|";
				
	Вершины = Новый Соответствие;
	Для Каждого Стр Из СписокСмежности Цикл 
		Вершины.Вставить(Стр.Ключ, Истина);
		Для Каждого chield Из Стр.Значение Цикл 
			Вершины.Вставить(chield.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	СписокВершин = Новый СписокЗначений;
	Для Каждого Стр Из Вершины Цикл 
		СписокВершин.Добавить(Стр.Ключ);
	КонецЦикла;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_dl_КонфигурационныеЕдиницы.Ссылка КАК Ссылка,
	               |	_dl_КонфигурационныеЕдиницы.Код КАК Код,
	               |	_dl_КонфигурационныеЕдиницы.КатегорияТипа КАК КатегорияТипа
	               |ИЗ
	               |	Справочник._dl_КонфигурационныеЕдиницы КАК _dl_КонфигурационныеЕдиницы
	               |ГДЕ
	               |	_dl_КонфигурационныеЕдиницы.Ссылка В(&Список)
	               |ИТОГИ ПО
	               |	КатегорияТипа";
	
	Запрос.УстановитьПараметр("Список", СписокВершин);	
	ВыборкаКатегорияТипа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИдентификаторыВершин = Новый Соответствие;
	ТипыВершин = Новый Соответствие;
	
	СтрокаГрупп = "@startuml"+Символы.ПС;
	
	Пока ВыборкаКатегорияТипа.Следующий() Цикл 
		
		СтрокаГрупп = СтрокаГрупп + "package "+ВыборкаКатегорияТипа.КатегорияТипа+" {" + Символы.ПС;
		
		Выборка = ВыборкаКатегорияТипа.Выбрать(); 
		Пока Выборка.Следующий() Цикл  
			
			СтрокаГрупп = СтрокаГрупп + "[" + Выборка.Ссылка + "] as " + Выборка.Код + Символы.ПС;//+ " #Black" 
			
			//ИдентификаторыВершин.Вставить(Выборка.Ссылка, Выборка.Код);		
			//ТипыВершин.Вставить(Выборка.Ссылка, Выборка.Тип);	
		КонецЦикла; 
		
		СтрокаГрупп = СтрокаГрупп + "}" + Символы.ПС;
		
	КонецЦикла;
	
	//Для Каждого Стр Из Вершины Цикл   
		
		
		//Граф = Граф + Символы.Таб + ИдентификаторыВершин[Стр.Ключ] + " [label="""+Стр.Ключ+"""";
		//Если ТипыВершин[Стр.Ключ] = Справочники._dl_ТипыКонфигурационныхЕдиниц.ИнформационнаяБаза1С Тогда 
		//	Граф = Граф + " shape=oval fillcolor=Orange style=filled";
		//ИначеЕсли ТипыВершин[Стр.Ключ] = Справочники._dl_ТипыКонфигурационныхЕдиниц.БазаДанныхСУБД Тогда 
		//	Граф = Граф + " shape=cylinder fillcolor=LightBlue style=filled";
		//ИначеЕсли ТипыВершин[Стр.Ключ] = Справочники._dl_ТипыКонфигурационныхЕдиниц.МенеджерКластера1С Тогда 
		//	Граф = Граф + " fillcolor=Honeydew style=filled";
		//ИначеЕсли ТипыВершин[Стр.Ключ] = Справочники._dl_ТипыКонфигурационныхЕдиниц.Кластер1С Тогда 
		//	Граф = Граф + " fillcolor=Bisque style=filled";
		//КонецЕсли;
		//Граф = Граф + "]" + Символы.ПС;
	//КонецЦикла;
	
	СтрокаСвязей = "";
	Для Каждого Стр Из СписокСмежности Цикл 
		Для Каждого chield Из Стр.Значение Цикл 
			Связь = "-->";
			
			СтрокаСвязей = СтрокаСвязей + Стр.Ключ.Код + Связь + chield.Ключ.Код + Символы.ПС;
			
			//Граф = Граф + Символы.Таб+ """"+ИдентификаторыВершин[Стр.Ключ]+""" -> """+ИдентификаторыВершин[chield.Ключ]+"""" + Символы.ПС;
		КонецЦикла;
	КонецЦикла;
	
	Текст = "";
	
	Текст = СтрокаГрупп + Символы.ПС + СтрокаСвязей + Символы.ПС + "@enduml";
	
	ПолучитьЗакодированныеДанные();  
	
	//Граф = Граф + "
	//|}";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура СгенерироватьТекстНаСервере()
	
	Соответствия = BFS(КЕ);
	Диаграмма = СформироватьUMLДиаграммуКомпонентовПоСпискуСмежности(Соответствия);
	
	Возврат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_dl_СвязиОбъектов.ОбъектИз КАК ОбъектИз,
	|	_dl_СвязиОбъектов.ОбъектВ КАК ОбъектВ
	|ПОМЕСТИТЬ втСвязи
	|ИЗ
	|	РегистрСведений._dl_СвязиОбъектов КАК _dl_СвязиОбъектов
	|ГДЕ
	|	_dl_СвязиОбъектов.Актуальна
	|	И _dl_СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Перечисление._dl_ТипыСвязи.ПрямаяСвязь)
	|	И _dl_СвязиОбъектов.ОбъектИз = &ОбъектСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	_dl_СвязиОбъектов.ОбъектВ,
	|	_dl_СвязиОбъектов.ОбъектИз
	|ИЗ
	|	РегистрСведений._dl_СвязиОбъектов КАК _dl_СвязиОбъектов
	|ГДЕ
	|	_dl_СвязиОбъектов.Актуальна
	|	И _dl_СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Перечисление._dl_ТипыСвязи.ПрямаяСвязь)
	|	И _dl_СвязиОбъектов.ОбъектВ = &ОбъектСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвязи.ОбъектИз КАК ОбъектИз,
	|	втСвязи.ОбъектВ КАК ОбъектВ,
	|	втСвязи.ОбъектИз.КатегорияТипа КАК ОбъектИзКатегорияТипа,
	|	втСвязи.ОбъектВ.КатегорияТипа КАК ОбъектВКатегорияТипа
	|ИЗ
	|	втСвязи КАК втСвязи
	|ИТОГИ ПО
	|	ОбъектИз,
	|	ОбъектВ";
	
	Запрос.УстановитьПараметр("ОбъектСвязи", КЕ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИз = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивЭлементовИз = Новый Массив;
	МассивЭлементовВ = Новый Массив;
	
	СтрокаСвязей = "";
	
	Пока ВыборкаИз.Следующий() Цикл
		ВыборкаВ = ВыборкаИз.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		Пока ВыборкаВ.Следующий() Цикл
			Если МассивЭлементовИз.Найти(ВыборкаВ.ОбъектИз) = Неопределено Тогда
				МассивЭлементовИз.Добавить(ВыборкаВ.ОбъектИз);
			КонецЕсли;   
			
			Если МассивЭлементовВ.Найти(ВыборкаВ.ОбъектВ) = Неопределено Тогда
				МассивЭлементовВ.Добавить(ВыборкаВ.ОбъектВ);
			КонецЕсли;
			
			ВыборкаДетальные = ВыборкаВ.Выбрать();
			
			Если ВыборкаДетальные.Количество() = 1 Тогда
              	Связь = "-->";
			ИначеЕсли ВыборкаДетальные.Количество() = 2 Тогда 
				Связь = "<-->";
			КонецЕсли;
			
			СтрокаСвязей = СтрокаСвязей + ПолучитьИмяОбъекта(ВыборкаВ.ОбъектИз) + Связь + ПолучитьИмяОбъекта(ВыборкаВ.ОбъектВ) + Символы.ПС;
  		КонецЦикла;	
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_СвязиОбъектовСрезПоследних.ОбъектИз КАК Объект,
		|	_dl_СвязиОбъектовСрезПоследних.ОбъектИз.КатегорияТипа КАК КатегорияТипа
		|ПОМЕСТИТЬ втСвязи
		|ИЗ
		|	РегистрСведений._dl_СвязиОбъектов.СрезПоследних(
		|			,
		|			ОбъектВ В (&МассивЭлементовВ)
		|				И ОбъектИз В (&МассивЭлементовИз)) КАК _dl_СвязиОбъектовСрезПоследних
		|ГДЕ
		|	_dl_СвязиОбъектовСрезПоследних.ТипСвязи = ЗНАЧЕНИЕ(Перечисление._dl_ТипыСвязи.ПрямаяСвязь)
		|	И _dl_СвязиОбъектовСрезПоследних.Актуальна
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	_dl_СвязиОбъектовСрезПоследних.ОбъектВ,
		|	_dl_СвязиОбъектовСрезПоследних.ОбъектВ.КатегорияТипа
		|ИЗ
		|	РегистрСведений._dl_СвязиОбъектов.СрезПоследних(
		|			,
		|			ОбъектВ В (&МассивЭлементовВ)
		|				И ОбъектИз В (&МассивЭлементовИз)) КАК _dl_СвязиОбъектовСрезПоследних
		|ГДЕ
		|	_dl_СвязиОбъектовСрезПоследних.ТипСвязи = ЗНАЧЕНИЕ(Перечисление._dl_ТипыСвязи.ПрямаяСвязь)
		|	И _dl_СвязиОбъектовСрезПоследних.Актуальна
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСвязи.Объект КАК Объект,
		|	втСвязи.КатегорияТипа КАК КатегорияТипа
		|ИЗ
		|	втСвязи КАК втСвязи
		|
		|СГРУППИРОВАТЬ ПО
		|	втСвязи.Объект,
		|	втСвязи.КатегорияТипа
		|ИТОГИ ПО
		|	КатегорияТипа";
	
	Запрос.УстановитьПараметр("МассивЭлементовИз", МассивЭлементовИз);
	Запрос.УстановитьПараметр("МассивЭлементовВ", МассивЭлементовВ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКатегория = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокаГрупп = "@startuml"+Символы.ПС;
	
	Пока ВыборкаКатегория.Следующий() Цикл
		
		СтрокаГрупп = СтрокаГрупп + "package "+ВыборкаКатегория.КатегорияТипа+" {" + Символы.ПС;	
		
		Выборка = ВыборкаКатегория.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаГрупп = СтрокаГрупп + "[" + Выборка.Объект + "] as "+ПолучитьИмяОбъекта(Выборка.Объект) + Символы.ПС;//+ " #Black" 
				
		КонецЦикла;
		
		СтрокаГрупп = СтрокаГрупп + "}" + Символы.ПС;
		
	КонецЦикла; 
	
	Текст = "";
	
	Текст = СтрокаГрупп + Символы.ПС + СтрокаСвязей + Символы.ПС + "@enduml";
	
	ПолучитьЗакодированныеДанные();  
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКартинку(Команда)
	СгенерироватьТекстНаСервере();
	ОтправитьДанныеВplantuml();
КонецПроцедуры     

&НаСервере
Функция ПолучитьИмяОбъекта(Наименование)
	
	Имя = СтрЗаменить(Наименование, " ", "");
	Имя = СтрЗаменить(Имя, "-", "_"); 
	
	Возврат Имя;	

КонецФункции   

&НаСервере
Процедура ПолучитьЗакодированныеДанные()

	ЗакодированнаяСтрока = нРег(Str2Hex(Текст, 16));

КонецПроцедуры 

&НаСервере
Функция Str2Hex(ТекстСообщения, ТипКодировки)
	
	СтрокаЗнаков = "";
	Если ТипКодировки = 1 Тогда
		ДлинаКодаСимвола = 4;
	Иначе
		ДлинаКодаСимвола = 2;
	КонецЕсли;
	Для К = 1 По СтрДлина(ТекстСообщения) Цикл
		СтрокаЗнаков = СтрокаЗнаков + Прав("0000"+DecToHex(КодСимвола(Сред(ТекстСообщения, К, 1))), ДлинаКодаСимвола);
	КонецЦикла;
	Возврат СтрокаЗнаков; 
	
КонецФункции 

&НаСервере
Функция DecToHex(Знач _Число)
	
	База = 16;
	Результат = "";
	Пока _Число <> 0 Цикл
		Поз =_Число % База;
		Результат = Сред("0123456789ABCDEF", Поз + 1, 1) + Результат;
		_Число = Цел(_Число / База);
	КонецЦикла;    
	
	Возврат Результат;
	
КонецФункции  

&НаСервере
Процедура ОтправитьДанныеВplantuml()
		
	Соединение = Новый HTTPСоединение("www.plantuml.com");
 
    Запрос = Новый HTTPЗапрос("plantuml/png/~h"+ЗакодированнаяСтрока);
		
	ИмяВходящегоФайла = ПолучитьИмяВременногоФайла("png");
	
	Результат = Соединение.Получить(Запрос, ИмяВходящегоФайла); 
	
	ФайлКартинки = Новый ДвоичныеДанные(ИмяВходящегоФайла);
	КартинкаPNG = Новый Картинка(ФайлКартинки);
	
	КартинкаОнлайн = ПоместитьВоВременноеХранилище(КартинкаPNG, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКартинку(Команда)
	
	СгенерироватьТекстНаСервере();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();   
	
	Для а = 1 По СтрЧислоСтрок(Текст) Цикл
		СтрокаДанных = СтрПолучитьСтроку(Текст, а);
		ТекстовыйДокумент.ДобавитьСтроку(СтрокаДанных);
	КонецЦикла;
	
	ТекстовыйДокумент.Записать("C:\UML1C\uml.txt");
			
	Кодировка = КодировкаТекста.UTF8;

	СМД = "java -jar C:\UML1C\plantuml.jar -charset utf-8 C:\UML1C\uml.txt";//-language ru -charset utf-8 -keepfiles	
		
	КомандаСистемы("cmd.exe /c """ + СМД + """", "C:\UML1C\");
	
	ФайлКартинки = Новый ДвоичныеДанные("C:\UML1C\uml.png");
	КартинкаPNG = Новый Картинка(ФайлКартинки);
	
	КартинкаОффлайн = ПоместитьВоВременноеХранилище(КартинкаPNG, Новый УникальныйИдентификатор);
  	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныйЗум()
	
	Зум = 80;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьГраф(Команда)
	
	ДанныеГрафа = СформироватьГрафДОТПоСпискуСмежности(BFS(КЕ));
	УстановитьСтандартныйЗум();
	СформироватьКартинку(); 
	
КонецПроцедуры 

Функция СформироватьГрафДОТПоСпискуСмежности(СписокСмежности, ИмяГрафа="") Экспорт
	
	ШапкаГрафа = "digraph " + ?(ИмяГрафа="", "Граф",ИмяГрафа) + " {
	|	node [shape=box]
	|	rankdir=RL;
	|	ratio=0;
	|";
	
	Вершины = Новый Соответствие;
	Для Каждого Стр Из СписокСмежности Цикл 
		Вершины.Вставить(Стр.Ключ, Истина);
		Для Каждого chield Из Стр.Значение Цикл 
			Вершины.Вставить(chield.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	СписокВершин = Новый СписокЗначений;
	Для Каждого Стр Из Вершины Цикл 
		СписокВершин.Добавить(Стр.Ключ);
	КонецЦикла;	 
	
	ИдентификаторыВершин = Новый Соответствие;
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	_dl_КонфигурационныеЕдиницы.Ссылка КАК Ссылка,
	               |	_dl_КонфигурационныеЕдиницы.Код КАК Код,
	               |	_dl_КонфигурационныеЕдиницы.Тип КАК Тип,
	               |	_dl_КонфигурационныеЕдиницы.КатегорияТипа КАК КатегорияТипа,
	               |	_dl_КонфигурационныеЕдиницы.тест_ГруппыПриложений КАК тест_ГруппыПриложений
	               |ИЗ
	               |	Справочник._dl_КонфигурационныеЕдиницы КАК _dl_КонфигурационныеЕдиницы
	               |ГДЕ
	               |	_dl_КонфигурационныеЕдиницы.Ссылка В(&Список)
	               |ИТОГИ ПО
	               |	тест_ГруппыПриложений";
	
	Запрос.УстановитьПараметр("Список", СписокВершин);	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Счетчик = 0;
	ВсеСубграфы = "";
	Пока Выборка.Следующий() Цикл
		Субграф = "";
		Счетчик = Счетчик + 1;		
				
		ВыборкаДет = Выборка.Выбрать();
		Пока ВыборкаДет.Следующий() Цикл  
			Субграф = Субграф + Символы.Таб + Символы.Таб + ВыборкаДет.Код + " [label="""+ВыборкаДет.Ссылка+"""]" + Символы.ПС;			
			
			ИдентификаторыВершин.Вставить(ВыборкаДет.Ссылка, ВыборкаДет.Код);	
		КонецЦикла; 
		
		Субграф = Субграф + Символы.ПС;
				
		Лейбл = Символы.Таб + Символы.Таб + " label = """+Выборка.тест_ГруппыПриложений+""" ;";
		
		ВсеСубграфы = ВсеСубграфы + ?(ВсеСубграфы="", "", Символы.ПС) + Символы.Таб + "subgraph " + "cluster_"+Счетчик;
		ВсеСубграфы = ВсеСубграфы + " { " + Символы.ПС + Лейбл + Символы.ПС + Субграф +" } ";	  
		
	КонецЦикла; 
	
	ВсеСубграфы = ВсеСубграфы + Символы.ПС;
	
	Связи = "";
	
	ТЗИспользованияПортов = ПолучитьТаблицуПортовПротоколов(СписокВершин);
	
	ТЗПройденныхСвязей = Новый ТаблицаЗначений; 
	ТЗПройденныхСвязей.Колонки.Добавить("ОбъектИз");
	ТЗПройденныхСвязей.Колонки.Добавить("ОбъектВ");
	
	Для Каждого Стр Из СписокСмежности Цикл 
		Для Каждого chield Из Стр.Значение Цикл 
			ПортПротокол 	= "";
			Порты 			= "";   
			Ориентированная = "";	
			
			НайденныеСвязи = ТЗПройденныхСвязей.НайтиСтроки(Новый Структура("ОбъектИз, ОбъектВ", Стр.Ключ, chield.Ключ)); 
			Если НайденныеСвязи.Количество() > 0 Тогда 
				Продолжить;
			Иначе  
				СтрТЗ = ТЗПройденныхСвязей.Добавить();
				СтрТЗ.ОбъектИз = chield.Ключ;
				СтрТЗ.ОбъектВ = Стр.Ключ;
			КонецЕсли;
			
			Если СписокСмежности.Получить(chield.Ключ) <> Неопределено 
				И СписокСмежности.Получить(chield.Ключ).Получить(Стр.Ключ) <> Неопределено Тогда
				
				Ориентированная = "dir = both";
			КонецЕсли;
			
			Найденные = ТЗИспользованияПортов.НайтиСтроки(Новый Структура("Сервер, Клиент", Стр.Ключ, chield.Ключ));
			Если Найденные.Количество() = 0 Тогда 
				Связи = Связи + Символы.Таб + """"+ИдентификаторыВершин[Стр.Ключ]+""" -> """+ИдентификаторыВершин[chield.Ключ]+"""";
				Связи = Связи + ?(Ориентированная="", "", " [ "+Ориентированная+" ] ");
			Иначе
				Для каждого Найденная Из Найденные Цикл 
					Если Найденная.ДиапазонПортовНачало <> 0 Тогда
						Если Найденная.ДиапазонПортовНачало = Найденная.ДиапазонПортовКонец Тогда
							Порты = "" + Найденная.ДиапазонПортовНачало;
						Иначе
							Порты = "" + Найденная.ДиапазонПортовНачало + "-" + Найденная.ДиапазонПортовКонец;	
						КонецЕсли;	
					КонецЕсли;
					
					Связи = Связи + Символы.Таб + """"+ИдентификаторыВершин[Стр.Ключ]+""" -> """+ИдентификаторыВершин[chield.Ключ]+"""";
					
					ПортПротокол = Порты + ?(ЗначениеЗаполнено(Найденная.Протокол),"/"+Найденная.Протокол, ""); 
					ПортПротокол = СтрЗаменить(ПортПротокол, Символы.НПП, "");
					
					Связи = Связи + " [ label = """ + ПортПротокол + """"+?(Ориентированная="", "", ", "+Ориентированная+"")+"]";
				КонецЦикла;	
			КонецЕсли;
						
			Связи = Связи + Символы.ПС;
		КонецЦикла;
	КонецЦикла;
	
	Граф = ШапкаГрафа + ВсеСубграфы + Связи;
	
	Граф = Граф + "
	|}"; 
		
	Возврат Граф;
	
КонецФункции  

&НаСервере
Функция ПолучитьТаблицуПортовПротоколов(СписокВершин)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	_dl_ИспользованиеПортовСрезПоследних.Сервер КАК Сервер,
		|	_dl_ИспользованиеПортовСрезПоследних.Клиент КАК Клиент,
		|	_dl_ИспользованиеПортовСрезПоследних.ДиапазонПортовНачало КАК ДиапазонПортовНачало,
		|	_dl_ИспользованиеПортовСрезПоследних.ДиапазонПортовКонец КАК ДиапазонПортовКонец,
		|	_dl_ИспользованиеПортовСрезПоследних.Протокол КАК Протокол
		|ИЗ
		|	РегистрСведений._dl_ИспользованиеПортов.СрезПоследних КАК _dl_ИспользованиеПортовСрезПоследних
		|ГДЕ
		|	_dl_ИспользованиеПортовСрезПоследних.Сервер В(&СписокВершин)
		|	И _dl_ИспользованиеПортовСрезПоследних.Клиент В(&СписокВершин)
		|	И _dl_ИспользованиеПортовСрезПоследних.Используется";
	
	Запрос.УстановитьПараметр("СписокВершин", СписокВершин);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗИспользованияПортов = РезультатЗапроса.Выгрузить();

	Возврат ТЗИспользованияПортов;

КонецФункции 

&НаКлиенте
Процедура СформироватьКартинку()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаКартинка", ЭтаФорма);
	ВнешняяКомпонента.НачатьВызовСформировать(ОписаниеОповещения, ДанныеГрафа, "svg");
	
КонецПроцедуры   

&НаКлиенте
Процедура ПолученаКартинка(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВызова) = Тип("ДвоичныеДанные") Тогда
		СформироватьHTML_SVG(РезультатВызова);
	ИначеЕсли ТипЗнч(РезультатВызова) = Тип("Строка") Тогда
		Сообщить(РезультатВызова);
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Процедура СформироватьHTML_SVG(ДанныеКартинки) Экспорт
	
	КартинкаГрафы = ПоместитьВоВременноеХранилище(Новый Картинка(ДанныеКартинки), Новый УникальныйИдентификатор);	
	
КонецПроцедуры   

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтаФорма, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, АдресКомпоненты, ИдентификаторКомпоненты, ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ВнешняяКомпонента = Новый("AddIn." + ИдентификаторКомпоненты + ".GraphViz1C");
		//ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаВерсияКомпоненты", ЭтаФорма);
		//ВнешняяКомпонента.НачатьПолучениеВерсия(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры



